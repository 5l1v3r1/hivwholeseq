# vim: fdm=marker
'''
author:     Fabio Zanini
date:       23/03/14
content:    Test the correlation coefficient between PCR1 and PCR2 patient samples,
            e.g. in allele frequencies and coallele frequencies.
'''
# Modules
import sys
import os
import argparse
import numpy as np
import pysam
from Bio import SeqIO

from hivwholeseq.miseq import alpha
from hivwholeseq.patients.patients import get_patient
from hivwholeseq.filter_mapped_reads import plot_distance_histogram, \
        plot_distance_histogram_sliding_window, get_distance_from_consensus, \
        check_overhanging_reads, trim_bad_cigar
from hivwholeseq.patients.filenames import get_initial_consensus_filename, \
        get_mapped_to_initial_filename, get_filter_mapped_init_summary_filename, \
        get_allele_cocounts_filename, get_allele_frequency_trajectories_filename
from hivwholeseq.mapping_utils import convert_sam_to_bam, pair_generator
from hivwholeseq.two_site_statistics import get_coallele_counts_from_file


# Script
if __name__ == '__main__':

    # Parse input args
    parser = argparse.ArgumentParser(description='Filter mapped reads')
    parser.add_argument('--patient', required=True,
                        help='Patient to analyze')
    parser.add_argument('--fragments', nargs='*',
                        help='Fragment to map (e.g. F1 F6)')
    parser.add_argument('--verbose', type=int, default=0,
                        help='Verbosity level [0-3]')
    parser.add_argument('--samples', nargs='*',
                        help='Samples to map (e.g. VL98-1253 VK03-4298)')

    args = parser.parse_args()
    pname = args.patient
    fragments = args.fragments
    VERBOSE = args.verbose
    samplenames = args.samples

    patient = get_patient(pname)

    for fragment in fragments:
        for samplename in samplenames:
            if samplename in patient.samples:
                samplename_PCR2 = samplename
            elif samplename+'_PCR2' in patient.samples:
                samplename_PCR2 = samplename+'_PCR2'
            else:
                raise ValueError('PCR2 sample not found!')

            if samplename+'_PCR1' in patient.samples:
                samplename_PCR1 = samplename+'_PCR1'
            else:
                raise ValueError('PCR1 sample not found!')

            samplenames_both = [samplename_PCR1, samplename_PCR2]
            index_both = map(patient.samples.index, samplenames_both)

            # Check allele frequencies
            aft = np.load(get_allele_frequency_trajectories_filename(pname, fragment))
            aft_both = np.ma.masked(aft[index_both])
            aft_both[(aft_both < 1e-3).any(axis=0)] = np.ma.masked
            # Take logs
            aft_bothlog = np.log(aft_both)


        #refseq = SeqIO.read(get_initial_consensus_filename(pname, fragment), 'fasta')

        #if VERBOSE >= 1:
        #    print 'Initializing matrix of coallele frequencies'
        #coaft = np.empty((len(samplenames), len(alpha), len(alpha), len(refseq), len(refseq)), float)
        #if VERBOSE >= 1:
        #    print 'Collecting cocounts and normalizing'
        #for i, samplename in enumerate(samplenames):
        #    if VERBOSE >= 2:
        #        print pname, fragment, samplename
        #    cocounts = np.load(get_allele_cocounts_filename(pname, samplename, fragment))
        #    # NOTE: uncovered will get 0 correlation
        #    coaft[i] = 1.0 * cocounts / (cocounts.sum(axis=0).sum(axis=0) + 0.1)
        #    del cocounts

        #if VERBOSE >= 1:
        #    print 'Getting allele frequencies'
        #aft = np.load(get_allele_frequency_trajectories_filename(pname, fragment))[:coaft.shape[0]]
        #if VERBOSE >= 1:

