PIPELINE FOR HIV MISEQ SEQUENCING DATA: PATIENTS
-------------------------------------------------------------------------------
LAST UPDATE: Jan 2015.

SINGLE-PATIENT DATA ANALYSIS
-------------------------------------------------------------------------------
The second step of the analysis maps all the reads onto a patient-specific
reference, in order to get a single frame of reference for population genetics
observables.

A few control scripts are available to monitor the status of the analysis:
- check_patients.py
- check_samples.py


The analysis is made of substeps:

-------------------------------------------------------------------------------
1 MAKE A REFERENCE
-------------------------------------------------------------------------------
1. Build a reference for each patient, using the consensus of the initial time
   point if possible, otherwise something similar. The reference must be good:
   all genes in place and in frame, complete coverage of the sequenced regions
   (with outer primers), agreement on overlapping stretches
   (build_initial_reference.py).

2. A genome-wide reference has to be created by stitching. If no complete
   agreement on overlaps can be achieved, a stitching recipe must be produced,
   such that the same can be applied to extend any observable to genome-wide
   coordinates.

CHECKPOINT: check initial reference for genes and length (check_initial_reference.py).

3. The genomewide reference gets annotated.

4. If needed, references for the single fragments can be extracted back from the
   genomewide one (to fill F5a, low coverage regions, etc.)

5. Make coordinate maps to references, e.g. HXB2 (store_coordinate_maps_to_reference.py)

6. Align all references from different patients to check they are consistent
   (store_alignment_references.py).


-------------------------------------------------------------------------------
2 MAP AND CLEAN THE READS
-------------------------------------------------------------------------------
1. Map the reads onto the reference, fragment by fragment (map_to_initial_reference.py).

2. merge various repetitions of the sequencing and filter away unmapped and similia
   (filter_mapped_reads.py)

3. decontaminate reads using all sample and reference consensi (decontaminate_reads.py)


-------------------------------------------------------------------------------
3 CONSENSI
-------------------------------------------------------------------------------
1. Build consensus of each sample (store_consensus.py)

2. Make a genomewide consensus for all samples that allow it (store_consensus_genomewide.py)

3. Align consensi from all patients to make trees (store_alignment_consensi.py)

4. Build trees of the consensi (store_tree_consensi.py)


-------------------------------------------------------------------------------
4 ALLELE COUNTS/COCOUNTS
-------------------------------------------------------------------------------
1. Extract allele counts for each sample (store_allele_counts.py)

2. Extract allele cocounts for each sample, for linkage (store_allele_cocounts.py)

3. Estimate sequencing depth of each fragment and sample from the allele counts
   (estimate_ntemplates.py).

4. Merge allele counts into genomewide matrices, paying attention to sequencing depth
   (store_allele_counts_genomewide.py).


-------------------------------------------------------------------------------
5 HAPLOTYPES
-------------------------------------------------------------------------------
1. Extract local haplotypes and frequencies from all patients and regions (store_haplotypes.py)

2. Build trees of the local haplotypes (store_tree_local.py)
